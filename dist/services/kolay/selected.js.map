{"version":3,"file":"selected.js","sources":["../../../src/services/kolay/selected.ts"],"sourcesContent":["import Service, { service } from '@ember/service';\n\nimport { use } from 'ember-resources';\nimport { keepLatest } from 'reactiveweb/keep-latest';\nimport { link } from 'reactiveweb/link';\n\nimport { Compiled } from './compiler/reactive.ts';\nimport { MDRequest } from './request.ts';\n\nimport type DocsService from './docs';\nimport type { Page } from './types';\nimport type RouterService from '@ember/routing/router-service';\nimport { getOwner } from '@ember/owner';\n\n/**\n * Populate a cache of all the documents.\n *\n * Network can be slow, and compilation is fast.\n * So after we get the requested page, let's get\n * everything else\n */\n// const fillCache = (path: string) => {\n//   fetch(`/docs/${path}`)\n// };\n//\n\nconst firstPath = '/1-get-started/intro.md';\n\n/**\n * Sort of like an ember-concurrency task...\n * if we ignore concurrency and only care about the states of the running function\n * (and want automatic invocation based on derivation)\n */\nclass Prose {\n  constructor(private docFn: () => string | null) {}\n\n  @use last = Compiled(this.docFn);\n\n  @use lastSuccessful = keepLatest({\n    value: () => this.last.component,\n    when: () => !this.last.isReady,\n  });\n}\n\nexport default class Selected extends Service {\n  @service declare router: RouterService;\n  @service('kolay/docs') declare docs: DocsService;\n\n  get config() {\n    // @ts-ignore\n    return getOwner(this).resolveRegistration('config:environment')\n  }\n\n  /*********************************************************************\n   * These load the files from /public and handle loading / error state.\n   *\n   * When the path changes for each of these, the previous request will\n   * be cancelled if it was still pending.\n   *******************************************************************/\n\n  @link request = new MDRequest(() => `${this.config.rootURL}docs${this.path}.md`);\n  @link compiled = new Prose(() => this.request.lastSuccessful);\n\n  get proseCompiled() {\n    return this.compiled.last;\n  }\n\n  /*********************************************************************\n   * This is a pattern to help reduce flashes of content during\n   * the intermediate states of the above request fetchers.\n   * When a new request starts, we'll hold on the old value for as long as\n   * we can, and only swap out the old data when the new data is done loading.\n   *\n   ********************************************************************/\n  get prose() {\n    return this.compiled.lastSuccessful;\n  }\n\n  /**\n   * Once this whole thing is \"true\", we can start\n   * rendering without extra flashes.\n   */\n  get isReady() {\n    return this.proseCompiled.isReady;\n  }\n\n  get hasError() {\n    return Boolean(this.proseCompiled.error) || this.request.hasError;\n  }\n  get error() {\n    if (!this.page) {\n      return `Page not found for path ${this.path}. (Using group: ${this.docs.currentGroup.name})`;\n    }\n\n    return String(this.proseCompiled.error);\n  }\n\n  get hasProse() {\n    return Boolean(this.prose);\n  }\n\n  get path(): string | undefined {\n    if (!this.router.currentURL) return firstPath;\n\n    let url = new URL(this.router.currentURL, window.location.origin);\n    let path = url.pathname;\n    let result = path && path !== '/' ? path : firstPath;\n\n    return result?.replace(/\\.md$/, '');\n  }\n\n  get page(): Page | undefined {\n    if (!this.path) return;\n\n    return this.#findByPath(this.path);\n  }\n\n  #findByPath = (path: string) => {\n    return this.docs.pages.find((page) => page.path === `${path}.md`);\n  };\n}\n\n// DO NOT DELETE: this is how TypeScript knows how to look up your services.\ndeclare module '@ember/service' {\n  interface Registry {\n    'kolay/selected': Selected;\n  }\n}\n"],"names":["firstPath","Prose","constructor","docFn","g","prototype","use","Compiled","i","void 0","keepLatest","value","last","component","when","isReady","Selected","Service","service","config","getOwner","resolveRegistration","link","MDRequest","rootURL","path","request","lastSuccessful","proseCompiled","compiled","prose","hasError","Boolean","error","page","docs","currentGroup","name","String","hasProse","router","currentURL","url","URL","window","location","origin","pathname","result","replace","pages","find"],"mappings":"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"}