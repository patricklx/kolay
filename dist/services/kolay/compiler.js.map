{"version":3,"file":"compiler.js","sources":["../../../src/services/kolay/compiler.ts"],"sourcesContent":["import Service, { service } from '@ember/service';\n\nimport { Shadowed } from 'ember-primitives/components/shadowed';\nimport { compile } from 'ember-repl';\n\nimport { APIDocs, CommentQuery } from '../../typedoc/renderer.gts';\nimport { ComponentSignature } from '../../typedoc/signature/component.gts';\nimport { HelperSignature } from '../../typedoc/signature/helper.gts';\nimport { ModifierSignature } from '../../typedoc/signature/modifier.gts';\nimport { CompileState } from './compiler/compile-state.ts';\nimport { getDefaultOptions } from './compiler/import-map.ts';\n\nimport type DocsService from './docs.ts';\n\nexport default class Compiler extends Service {\n  @service('kolay/docs') declare docs: DocsService;\n\n  // for debugging in the inspector / console\n  last?: CompileState;\n\n  compileMD = (code: string | undefined | null) => {\n    let state = new CompileState();\n\n    this.last = state;\n\n    if (!code) {\n      return state;\n    }\n\n    let {\n      additionalResolves: importMap,\n      additionalTopLevelScope: topLevelScope,\n      remarkPlugins,\n      rehypePlugins,\n    } = this.docs;\n    let defaults = getDefaultOptions();\n\n    compile(code, {\n      ...defaults,\n      /**\n       * Documentation can only be in markdown.\n       */\n      format: 'glimdown',\n      ShadowComponent: 'Shadowed',\n      remarkPlugins,\n      rehypePlugins,\n      importMap: {\n        ...defaults.importMap,\n        ...importMap,\n      },\n      topLevelScope: {\n        Shadowed,\n        APIDocs,\n        CommentQuery,\n        ComponentSignature,\n        ModifierSignature,\n        HelperSignature,\n        ...topLevelScope,\n      },\n      onSuccess: async (component) => state.success(component),\n      onError: async (e) => state.fail(e),\n      onCompileStart: async () => (state.isCompiling = true),\n    });\n\n    return state;\n  };\n}\n"],"names":["Compiler","Service","g","prototype","service","i","void 0","compileMD","code","state","CompileState","last","additionalResolves","importMap","additionalTopLevelScope","topLevelScope","remarkPlugins","rehypePlugins","docs","defaults","getDefaultOptions","compile","format","ShadowComponent","Shadowed","APIDocs","CommentQuery","ComponentSignature","ModifierSignature","HelperSignature","onSuccess","component","success","onError","e","fail","onCompileStart","isCompiling"],"mappings":";;;;;;;;;;;AAce,MAAMA,QAAQ,SAASC,OAAO,CAAC;AAAA,EAAA;AAAAC,IAAAA,CAAA,MAAAC,SAAA,EAAA,MAAA,EAAA,CAC3CC,OAAO,CAAC,YAAY,CAAC,CAAA,CAAA;AAAA;AAAA,EAAA,KAAA,IAAAC,CAAA,CAAA,IAAA,EAAA,MAAA,CAAA,EAAAC,KAAA,CAAA;AAEtB;;EAGAC,SAAS,GAAIC,IAA+B,IAAK;AAC/C,IAAA,IAAIC,KAAK,GAAG,IAAIC,YAAY,EAAE;IAE9B,IAAI,CAACC,IAAI,GAAGF,KAAK;IAEjB,IAAI,CAACD,IAAI,EAAE;AACT,MAAA,OAAOC,KAAK;AACd;IAEA,IAAI;AACFG,MAAAA,kBAAkB,EAAEC,SAAS;AAC7BC,MAAAA,uBAAuB,EAAEC,aAAa;MACtCC,aAAa;AACbC,MAAAA;KACD,GAAG,IAAI,CAACC,IAAI;AACb,IAAA,IAAIC,QAAQ,GAAGC,iBAAiB,EAAE;IAElCC,OAAO,CAACb,IAAI,EAAE;AACZ,MAAA,GAAGW,QAAQ;AACX;AACN;AACA;AACMG,MAAAA,MAAM,EAAE,UAAU;AAClBC,MAAAA,eAAe,EAAE,UAAU;MAC3BP,aAAa;MACbC,aAAa;AACbJ,MAAAA,SAAS,EAAE;QACT,GAAGM,QAAQ,CAACN,SAAS;QACrB,GAAGA;OACJ;AACDE,MAAAA,aAAa,EAAE;QACbS,QAAQ;QACRC,OAAO;QACPC,YAAY;QACZC,kBAAkB;QAClBC,iBAAiB;QACjBC,eAAe;QACf,GAAGd;OACJ;MACDe,SAAS,EAAE,MAAOC,SAAS,IAAKtB,KAAK,CAACuB,OAAO,CAACD,SAAS,CAAC;MACxDE,OAAO,EAAE,MAAOC,CAAC,IAAKzB,KAAK,CAAC0B,IAAI,CAACD,CAAC,CAAC;AACnCE,MAAAA,cAAc,EAAE,YAAa3B,KAAK,CAAC4B,WAAW,GAAG;AACnD,KAAC,CAAC;AAEF,IAAA,OAAO5B,KAAK;GACb;AACH;;;;"}