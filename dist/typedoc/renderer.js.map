{"version":3,"file":"renderer.js","sources":["../../src/typedoc/renderer.gts"],"sourcesContent":["import { template } from \"@ember/template-compiler\";\nimport { hash } from '@ember/helper';\nimport { Compiled } from '../services/kolay/compiler/reactive.ts';\nimport { Load } from './utils.gts';\nimport type { TOC } from '@ember/component/template-only';\nimport type { ArrayType, DeclarationReference, DeclarationReflection, LiteralType, NamedTupleMember, ReferenceType, SignatureReflection, SomeType, TupleType, UnionType, UnknownType } from 'typedoc';\n/**\n * Assumptions:\n * - we are documenting public API\n *   - component properties and methods are not public API\n *     - including the constructor, inherited methods, etc\n *   - only the signature describes what the public API is.\n */ export const APIDocs: TOC<{\n    Args: {\n        /**\n     * Which module to import the type from\n     */ module: string;\n        /**\n     * The name of the export to render the type / JSDoc of\n     */ name: string;\n        /**\n     * The name of the package to lookup the module and export name.\n     */ package: string;\n    };\n}> = template(`\n  <Load @module={{@module}} @name='{{@name}}' @package={{@package}} as |info|>\n    <Declaration @info={{info}} />\n  </Load>\n`, {\n    eval () {\n        return eval(arguments[0]);\n    }\n});\n/**\n * Used for referencing the comment on a const or class.\n *\n * For example:\n * ```\n * /*\n *  * Comment block here is what is targeted\n *  *\\/\n * export const CommentQuery ...\n * ```\n *\n * Usage:\n * ```hbs\n * <CommentQuery @name=\"CommentQuery\" ... />\n * ```\n */ export const CommentQuery: TOC<{\n    Args: {\n        /**\n     * Which module to import the type from\n     */ module: string;\n        /**\n     * The name of the export to render the type / JSDoc of\n     */ name: string;\n        /**\n     * The name of the package to lookup the module and export name.\n     */ package: string;\n    };\n}> = template(`\n  <Load @package={{@package}} @module={{@module}} @name={{@name}} as |info|>\n    <Comment @info={{info}} />\n  </Load>\n`, {\n    eval () {\n        return eval(arguments[0]);\n    }\n});\nconst join = (lines1: string[])=>lines1.join('\\n');\nconst text = (lines1: {\n    text: string;\n}[])=>lines1.map((line1)=>line1.text);\nexport function isGlimmerComponent(info1: DeclarationReference) {\n    let extended1 = (info1 as any)?.extendedTypes?.[0];\n    if (!extended1) return false;\n    return (extended1.name === 'default' && extended1.package === '@glimmer/component');\n}\nexport const Comment: TOC<{\n    Args: {\n        info: {\n            comment?: {\n                summary?: {\n                    text: string;\n                }[];\n            };\n        };\n    };\n}> = template(`\n  {{#if @info.comment.summary}}\n    {{#let (Compiled (join (text @info.comment.summary))) as |compiled|}}\n      {{#if compiled.isReady}}\n        <div class='typedoc-rendered-comment'>\n          <compiled.component />\n        </div>\n      {{/if}}\n    {{/let}}\n  {{/if}}\n`, {\n    eval () {\n        return eval(arguments[0]);\n    }\n});\nconst isIgnored = (name1: string)=>[\n        '__type',\n        'TOC',\n        'TemplateOnlyComponent'\n    ].includes(name1);\nconst isConst = (x1: {\n    flags: {\n        isConst: boolean;\n    };\n})=>x1.flags.isConst;\nconst not = (x1: unknown)=>!x1;\nconst Declaration: TOC<{\n    Args: {\n        info: DeclarationReflection | undefined;\n    };\n}> = template(`\n  {{#if @info}}\n    <div class='typedoc__declaration'>\n      {{#if (not (isIgnored @info.name))}}\n        <span class='typedoc__declaration-name'>{{@info.name}}</span>\n      {{/if}}\n\n      {{#if (isConst @info)}}\n        <Comment @info={{@info}} />\n      {{/if}}\n\n      {{#if @info.type}}\n        <Type @info={{@info.type}} />\n      {{/if}}\n\n      {{#if @info.children}}\n        <ul class='typedoc__declaration-children'>\n          {{#each @info.children as |child|}}\n            <li><Declaration @info={{child}} /></li>\n          {{/each}}\n        </ul>\n      {{/if}}\n\n      {{#if @info.signatures}}\n        <ul class='typedoc__declaration-signatures'>\n          {{#each @info.signatures as |child|}}\n            {{! @glint-expect-error }}\n            <li><Type @info={{child}} /></li>\n          {{/each}}\n        </ul>\n      {{/if}}\n\n      {{#if (not (isConst @info))}}\n        {{#if @info.comment.summary}}\n          <Comment @info={{@info}} />\n        {{/if}}\n      {{/if}}\n    </div>\n  {{/if}}\n`, {\n    eval () {\n        return eval(arguments[0]);\n    }\n});\nconst Reflection: TOC<{\n    info: {\n        declaration: DeclarationReflection;\n    };\n}> = template(`<Declaration @info={{@info.declaration}} />`, {\n    eval () {\n        return eval(arguments[0]);\n    }\n});\nconst isReference = (x1: {\n    type: string;\n})=>x1?.type === 'reference';\nconst isReflection = (x1: {\n    type: string;\n})=>x1?.type === 'reflection';\nexport const isIntrinsic = (x1: {\n    type: string;\n})=>x1?.type === 'intrinsic';\nconst isTuple = (x1: {\n    type: string;\n})=>x1?.type === 'tuple';\nexport const isNamedTuple = (x1: SomeType | undefined): x is NamedTupleMember =>x1?.type === 'namedTupleMember';\nconst isVoidIntrinsic = (x1: unknown | undefined)=>{\n    if (!x1) return false;\n    if (typeof x1 !== 'object') return false;\n    if (x1 === null) return false;\n    if (!('type' in x1)) return false;\n    if (typeof x1.type === 'object' && x1.type !== null) {\n        if ('type' in x1.type && 'name' in x1.type) {\n            return x1.type.type === 'intrinsic' && x1.type.name === 'void';\n        }\n    }\n    return false;\n};\nconst isArray = (x1: SomeType | undefined): x is ArrayType =>{\n    if (!x1) return false;\n    if (typeof x1 !== 'object') return false;\n    if (x1 === null) return false;\n    if (!('type' in x1)) return false;\n    return x1.type === 'array';\n};\nconst isFn = (x1: SomeType | undefined)=>{\n    if (!x1) return false;\n    if (typeof x1 !== 'object') return false;\n    if (x1 === null) return false;\n    if (!('name' in x1)) return false;\n    if (!('variant' in x1)) return false;\n    return x1.variant === 'signature';\n};\nconst isUnknownType = (x1: SomeType | undefined): x is UnknownType =>{\n    if (!x1) return false;\n    if (typeof x1 !== 'object') return false;\n    if (x1 === null) return false;\n    if (!('type' in x1)) return false;\n    return x1.type === 'unknown';\n};\nconst isUnion = (x1: SomeType | undefined): x is UnionType =>{\n    if (!x1) return false;\n    if (typeof x1 !== 'object') return false;\n    if (x1 === null) return false;\n    if (!('type' in x1)) return false;\n    return x1.type === 'union';\n};\nconst isLiteral = (x1: SomeType | undefined): x is UnionType =>{\n    if (!x1) return false;\n    if (typeof x1 !== 'object') return false;\n    if (x1 === null) return false;\n    if (!('type' in x1)) return false;\n    return x1.type === 'literal';\n};\n// function typeArg(info: DeclarationReference) {\n//   let extended = info?.extendedTypes?.[0]\n//   if (!extended) return false;\n//   return extended.typeArguments[0]\n// }\n//\nconst isInvokable = (info1: ReferenceType)=>info1.name === 'Invokable';\nconst Reference: TOC<{\n    info: ReferenceType;\n}> = template(`\n  {{#if (isInvokable @info)}}\n    <div class='typedoc__unknown__yield'>\n      <Intrinsic @info={{hash name='Component'}} />\n    </div>\n  {{else}}\n    <div class='typedoc__reference'>\n      {{#if (not (isIgnored @info.name))}}\n        <div class='typedoc__reference__name'>{{@info.name}}</div>\n      {{/if}}\n      {{#if @info.typeArguments.length}}\n        <div class='typedoc__reference__typeArguments'>\n          &lt;\n          {{#each @info.typeArguments as |typeArg|}}\n            <div class='typedoc__reference__typeArgument'>\n              <Type @info={{typeArg}} />\n            </div>\n          {{/each}}\n          &gt;\n        </div>\n      {{/if}}\n    </div>\n  {{/if}}\n`, {\n    eval () {\n        return eval(arguments[0]);\n    }\n});\nconst Intrinsic: TOC<{\n    info: {\n        name: string;\n    };\n}> = template(`\n  <span class='typedoc__intrinsic'>{{@info.name}}</span>\n`, {\n    eval () {\n        return eval(arguments[0]);\n    }\n});\nconst VoidIntrinsic: TOC<{\n    info: {\n        name: string;\n    };\n}> = template(`\n  <div class='typedoc__void_intrinsic'>\n    {{! @glint-expect-error }}\n    <Function @info={{@info}} />\n  </div>\n`, {\n    eval () {\n        return eval(arguments[0]);\n    }\n});\nconst Tuple: TOC<{\n    Args: {\n        info: TupleType;\n    };\n}> = template(`\n  {{#each @info.elements as |element|}}\n    <Type @info={{element}} />\n  {{/each}}\n`, {\n    eval () {\n        return eval(arguments[0]);\n    }\n});\nexport const NamedTuple: TOC<{\n    Args: {\n        info: NamedTupleMember;\n    };\n}> = template(`\n  <div class='typedoc__named-tuple'>\n    <div class='typedoc__name'>{{@info.name}}</div>\n    <Type @info={{@info.element}} />\n  </div>\n`, {\n    eval () {\n        return eval(arguments[0]);\n    }\n});\nconst Array: TOC<{\n    Args: {\n        info: ArrayType;\n    };\n}> = template(`\n  <div class='typedoc__array'>\n    <div class='typedoc__array__indicator'>Array of</div>\n    <Type @info={{@info.elementType}} />\n  </div>\n`, {\n    eval () {\n        return eval(arguments[0]);\n    }\n});\nconst Function: TOC<{\n    Args: {\n        info: SignatureReflection;\n    };\n}> = template(`\n  <div class='typedoc__function'>\n    <div class='typedoc__function_comment'>\n      <Comment @info={{@info}} />\n    </div>\n    <div class='typedoc__function__type'>\n      <div class='typedoc__function__open'>(</div>\n      <div class='typedoc__function__parameters'>\n        {{#each @info.parameters as |param|}}\n          <div class='typedoc__function__parameter__container'>\n            <div class='typedoc__function__parameter'>\n              <div\n                class='typedoc__function__parameter__name'\n              >{{param.name}}</div>\n              <div class='typedoc__function__parameter__type'>\n                {{! @glint-expect-error }}\n                <Type @info={{param.type}} />\n              </div>\n            </div>\n            <div class='typedoc__function__parameter__comment'>\n              <Comment @info={{param}} />\n            </div>\n          </div>\n        {{/each}}\n      </div>\n      <div class='typedoc__function__close'>) =></div>\n      <div class='typedoc__function__return_type'>\n        {{! @glint-expect-error }}\n        <Type @info={{@info.type}} />\n      </div>\n    </div>\n  </div>\n`, {\n    eval () {\n        return eval(arguments[0]);\n    }\n});\nconst Unknown: TOC<{\n    Args: {\n        info: any;\n    };\n}> = template(`\n  <div class='typedoc__unknown'>\n    {{@info.name}}\n  </div>\n`, {\n    eval () {\n        return eval(arguments[0]);\n    }\n});\nconst Union: TOC<{\n    Args: {\n        info: UnionType;\n    };\n}> = template(`\n  <div class='typedoc__union'>\n    {{#each @info.types as |type|}}\n      <div class='typedoc__union__type'>\n        <Type @info={{type}} />\n      </div>\n    {{/each}}\n  </div>\n`, {\n    eval () {\n        return eval(arguments[0]);\n    }\n});\nconst literalAsString = (x1: LiteralType['value'])=>{\n    if (typeof x1 === 'string') {\n        return `\"${x1}\"`;\n    }\n    if (typeof x1 === 'number' || typeof x1 === 'boolean' || x1 === null) {\n        return `${x1}`;\n    }\n    return x1.toString();\n};\nconst Literal: TOC<{\n    Args: {\n        info: LiteralType;\n    };\n}> = template(`\n  <div class='typedoc__literal'>\n    {{literalAsString @info.value}}\n  </div>\n`, {\n    eval () {\n        return eval(arguments[0]);\n    }\n});\nexport const Type: TOC<{\n    Args: {\n        info: SomeType;\n    };\n}> = template(`\n  {{#if (isReference @info)}}\n    {{! @glint-expect-error }}\n    <Reference @info={{@info}} />\n  {{else if (isReflection @info)}}\n    {{! @glint-expect-error }}\n    <Reflection @info={{@info}} />\n  {{else if (isIntrinsic @info)}}\n    {{! @glint-expect-error }}\n    <Intrinsic @info={{@info}} />\n  {{else if (isTuple @info)}}\n    {{! @glint-expect-error }}\n    <Tuple @info={{@info}} />\n  {{else if (isNamedTuple @info)}}\n    <NamedTuple @info={{@info}} />\n  {{else if (isVoidIntrinsic @info)}}\n    {{! @glint-expect-error }}\n    <VoidIntrinsic @info={{@info}} />\n  {{else if (isArray @info)}}\n    <Array @info={{@info}} />\n  {{else if (isFn @info)}}\n    {{! @glint-expect-error }}\n    <Function @info={{@info}} />\n  {{else if (isUnion @info)}}\n    <Union @info={{@info}} />\n  {{else if (isLiteral @info)}}\n    <Literal @info={{@info}} />\n  {{else if (isUnknownType @info)}}\n    <Unknown @info={{@info}} />\n  {{else}}\n    {{! template-lint-disable no-log }}\n    {{log 'Unknown Type' @info}}\n  {{/if}}\n`, {\n    eval () {\n        return eval(arguments[0]);\n    }\n});\n//# sourceMappingURL=data:application/json;base64,"],"names":["APIDocs","precompileTemplate","strictMode","scope","Load","Declaration","templateOnly","CommentQuery","Comment","join","lines1","text","map","line1","isGlimmerComponent","info1","extended1","extendedTypes","name","package","Compiled","isIgnored","name1","includes","isConst","x1","flags","not","Type","Reflection","isReference","type","isReflection","isIntrinsic","isTuple","isNamedTuple","isVoidIntrinsic","isArray","isFn","variant","isUnknownType","isUnion","isLiteral","isInvokable","Reference","Intrinsic","hash","VoidIntrinsic","Function","Tuple","NamedTuple","Array","Unknown","Union","literalAsString","toString","Literal"],"mappings":";;;;;;;AA2BaA,MAAAA,UAeRC,oBAAAA,CAAAA,kBAAA,CAIL,qIAAA,EAAA;EAAAC,UAAA,EAAA,IAAA;AAAAC,EAAAA,KAAA,EAAAA,OAAA;IAAAC,IAAA;AAAAC,IAAAA;AAAA,GAAA;AAAU,CAAA,CAAA,EAAAC,YAAA,EAAA;AAEV;;;;;;;;;;;;;;;;AAgBaC,MAAAA,eAeRN,oBAAAA,CAAAA,kBAAA,CAIL,6HAAA,EAAA;EAAAC,UAAA,EAAA,IAAA;AAAAC,EAAAA,KAAA,EAAAA,OAAA;IAAAC,IAAA;AAAAI,IAAAA;AAAA,GAAA;AAAU,CAAA,CAAA,EAAAF,YAAA,EAAA;AAEV,MAAMG,IAAA,GAAQC,MAAa,IAAOA,MAAA,CAAMD,IAAI,CAAC,IAAA,CAAA;AAC7C,MAAME,IAAA,GAAQD,UAA8BA,MAAA,CAAME,GAAG,CAAEC,KAAA,IAASA,KAAA,CAAKF,IAAI,CAAA;AAElE,SAASG,mBAAmBC,KAA0B,EAAA;AAC3D,EAAA,IAAIC,SAAA,GAAYD,KAAA,EAAcE,aAAA,GAAgB,CAAE,CAAA;EAEhD,IAAI,CAACD,SAAA,EAAU,OAAO,KAAA;EAEtB,OACEA,SAAA,CAASE,IAAI,KAAK,aAAaF,SAAA,CAASG,OAAO,KAAK,oBACtD;AACF;AAEaX,MAAAA,UAQRP,oBAAAA,CAAAA,kBAAA,CAUL,4RAAA,EAAA;EAAAC,UAAA,EAAA,IAAA;AAAAC,EAAAA,KAAA,EAAAA,OAAA;IAAAiB,QAAA;IAAAX,IAAA;AAAAE,IAAAA;AAAA,GAAA;AAAU,CAAA,CAAA,EAAAL,YAAA,EAAA;AAEV,MAAMe,SAAA,GAAaC,KAAY,IAC7B,CAAC,QAAU,EAAA,KAAA,EAAO,uBAAwB,CAAA,CAACC,QAAQ,CAACD,KAAA,CAAA;AACtD,MAAME,OAAA,GAAWC,MAAuCA,EAAA,CAAEC,KAAK,CAACF,OAAO;AACvE,MAAMG,GAAA,GAAOF,EAAU,IAAK,CAACA,EAAA;AAE7B,MAAMpB,cAIDJ,oBAAAA,CAAAA,kBAAA,CAuCL,6hCAAA,EAAA;EAAAC,UAAA,EAAA,IAAA;AAAAC,EAAAA,KAAA,EAAAA,OAAA;IAAAwB,GAAA;IAAAN,SAAA;IAAAG,OAAA;IAAAhB,OAAA;IAAAoB,IAAA;AAAAvB,IAAAA;AAAA,GAAA;AAAU,CAAA,CAAA,EAAAC,YAAA,EAAA,CAAA;AAEV,MAAMuB,aACJ5B,oBAAAA,CAAAA,kBAAA,CAAqD,6CAAA,EAAA;EAAAC,UAAA,EAAA,IAAA;AAAAC,EAAAA,KAAA,EAAAA,OAAA;AAAAE,IAAAA;AAAA,GAAA;AAAU,CAAA,CAAA,EAAAC,YAAA,EAAA,CAAA;AAEjE,MAAMwB,WAAA,GAAeL,MAAwBA,EAAA,EAAGM,IAAA,KAAS,WAAA;AACzD,MAAMC,YAAA,GAAgBP,MAAwBA,EAAA,EAAGM,IAAA,KAAS,YAAA;AAEnD,MAAME,WAAA,GAAeR,MAAwBA,EAAA,EAAGM,IAAA,KAAS;AAEhE,MAAMG,OAAA,GAAWT,MAAwBA,EAAA,EAAGM,IAAA,KAAS,OAAA;AAE9C,MAAMI,YAAA,GAAgBV,EAAuB,IAClDA,EAAA,EAAGM,IAAA,KAAS;AAEd,MAAMK,eAAA,GAAmBX,EAAsB,IAAA;EAC7C,IAAI,CAACA,EAAA,EAAG,OAAO,KAAA;AACf,EAAA,IAAI,OAAOA,EAAA,KAAM,QAAA,EAAU,OAAO,KAAA;EAClC,IAAIA,EAAA,KAAM,IAAA,EAAM,OAAO,KAAA;AACvB,EAAA,IAAI,EAAE,MAAA,IAAUA,EAAC,CAAA,EAAG,OAAO,KAAA;EAE3B,IAAI,OAAOA,EAAA,CAAEM,IAAI,KAAK,YAAYN,EAAA,CAAEM,IAAI,KAAK,IAAM,EAAA;IACjD,IAAI,MAAA,IAAUN,EAAA,CAAEM,IAAI,IAAI,MAAUN,IAAAA,EAAA,CAAEM,IAAI,EAAE;AACxC,MAAA,OAAON,EAAA,CAAEM,IAAI,CAACA,IAAI,KAAK,WAAeN,IAAAA,EAAA,CAAEM,IAAI,CAACb,IAAI,KAAK,MAAA;AACxD;AACF;EAEA,OAAO,KAAA;AACT,CAAA;AAEA,MAAMmB,OAAA,GAAWZ,EAAuB,IAAQ;EAC9C,IAAI,CAACA,EAAA,EAAG,OAAO,KAAA;AACf,EAAA,IAAI,OAAOA,EAAA,KAAM,QAAA,EAAU,OAAO,KAAA;EAClC,IAAIA,EAAA,KAAM,IAAA,EAAM,OAAO,KAAA;AACvB,EAAA,IAAI,EAAE,MAAA,IAAUA,EAAC,CAAA,EAAG,OAAO,KAAA;EAE3B,OAAOA,EAAA,CAAEM,IAAI,KAAK,OAAA;AACpB,CAAA;AAEA,MAAMO,IAAA,GAAQb,EAAuB,IAAA;EACnC,IAAI,CAACA,EAAA,EAAG,OAAO,KAAA;AACf,EAAA,IAAI,OAAOA,EAAA,KAAM,QAAA,EAAU,OAAO,KAAA;EAClC,IAAIA,EAAA,KAAM,IAAA,EAAM,OAAO,KAAA;AACvB,EAAA,IAAI,EAAE,MAAA,IAAUA,EAAC,CAAA,EAAG,OAAO,KAAA;AAC3B,EAAA,IAAI,EAAE,SAAA,IAAaA,EAAC,CAAA,EAAG,OAAO,KAAA;EAE9B,OAAOA,EAAA,CAAEc,OAAO,KAAK,WAAA;AACvB,CAAA;AAEA,MAAMC,aAAA,GAAiBf,EAAuB,IAAQ;EACpD,IAAI,CAACA,EAAA,EAAG,OAAO,KAAA;AACf,EAAA,IAAI,OAAOA,EAAA,KAAM,QAAA,EAAU,OAAO,KAAA;EAClC,IAAIA,EAAA,KAAM,IAAA,EAAM,OAAO,KAAA;AACvB,EAAA,IAAI,EAAE,MAAA,IAAUA,EAAC,CAAA,EAAG,OAAO,KAAA;EAE3B,OAAOA,EAAA,CAAEM,IAAI,KAAK,SAAA;AACpB,CAAA;AAEA,MAAMU,OAAA,GAAWhB,EAAuB,IAAQ;EAC9C,IAAI,CAACA,EAAA,EAAG,OAAO,KAAA;AACf,EAAA,IAAI,OAAOA,EAAA,KAAM,QAAA,EAAU,OAAO,KAAA;EAClC,IAAIA,EAAA,KAAM,IAAA,EAAM,OAAO,KAAA;AACvB,EAAA,IAAI,EAAE,MAAA,IAAUA,EAAC,CAAA,EAAG,OAAO,KAAA;EAE3B,OAAOA,EAAA,CAAEM,IAAI,KAAK,OAAA;AACpB,CAAA;AACA,MAAMW,SAAA,GAAajB,EAAuB,IAAQ;EAChD,IAAI,CAACA,EAAA,EAAG,OAAO,KAAA;AACf,EAAA,IAAI,OAAOA,EAAA,KAAM,QAAA,EAAU,OAAO,KAAA;EAClC,IAAIA,EAAA,KAAM,IAAA,EAAM,OAAO,KAAA;AACvB,EAAA,IAAI,EAAE,MAAA,IAAUA,EAAC,CAAA,EAAG,OAAO,KAAA;EAE3B,OAAOA,EAAA,CAAEM,IAAI,KAAK,SAAA;AACpB,CAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA,MAAMY,WAAA,GAAe5B,KAAM,IAAkBA,KAAA,CAAKG,IAAI,KAAK,WAAA;AAE3D,MAAM0B,YAA0C3C,oBAAAA,CAAAA,kBAAA,CAuBhD,0sBAAA,EAAA;EAAAC,UAAA,EAAA,IAAA;AAAAC,EAAAA,KAAA,EAAAA,OAAA;IAAAwC,WAAA;IAAAE,SAAA;IAAAC,IAAA;IAAAnB,GAAA;IAAAN,SAAA;AAAAO,IAAAA;AAAA,GAAA;AAAU,CAAA,CAAA,EAAAtB,YAAA,EAAA,CAAA;AAEV,MAAMuC,YAA6C5C,oBAAAA,CAAAA,kBAAA,CAEnD,gEAAA,EAAA;EAAAC,UAAA,EAAA;AAAU,CAAA,CAAA,EAAAI,YAAA,EAAA,CAAA;AAEV,MAAMyC,gBAAiD9C,oBAAAA,CAAAA,kBAAA,CAKvD,+HAAA,EAAA;EAAAC,UAAA,EAAA,IAAA;AAAAC,EAAAA,KAAA,EAAAA,OAAA;AAAA6C,IAAAA;AAAA,GAAA;AAAU,CAAA,CAAA,EAAA1C,YAAA,EAAA,CAAA;AAEV,MAAM2C,QAA4ChD,oBAAAA,CAAAA,kBAAA,CAIlD,0FAAA,EAAA;EAAAC,UAAA,EAAA,IAAA;AAAAC,EAAAA,KAAA,EAAAA,OAAA;AAAAyB,IAAAA;AAAA,GAAA;AAAU,CAAA,CAAA,EAAAtB,YAAA,EAAA,CAAA;AAEG4C,MAAAA,aAAwDjD,oBAAAA,CAAAA,kBAAA,CAKrE,mJAAA,EAAA;EAAAC,UAAA,EAAA,IAAA;AAAAC,EAAAA,KAAA,EAAAA,OAAA;AAAAyB,IAAAA;AAAA,GAAA;AAAU,CAAA,CAAA,EAAAtB,YAAA,EAAA;AAEV,MAAM6C,QAA4ClD,oBAAAA,CAAAA,kBAAA,CAKlD,uJAAA,EAAA;EAAAC,UAAA,EAAA,IAAA;AAAAC,EAAAA,KAAA,EAAAA,OAAA;AAAAyB,IAAAA;AAAA,GAAA;AAAU,CAAA,CAAA,EAAAtB,YAAA,EAAA,CAAA;AAEV,MAAM0C,WAAyD/C,oBAAAA,CAAAA,kBAAA,CAgC/D,ooCAAA,EAAA;EAAAC,UAAA,EAAA,IAAA;AAAAC,EAAAA,KAAA,EAAAA,OAAA;IAAAK,OAAA;AAAAoB,IAAAA;AAAA,GAAA;AAAU,CAAA,CAAA,EAAAtB,YAAA,EAAA,CAAA;AAEV,MAAM8C,UAAwCnD,oBAAAA,CAAAA,kBAAA,CAI9C,sEAAA,EAAA;EAAAC,UAAA,EAAA;AAAU,CAAA,CAAA,EAAAI,YAAA,EAAA,CAAA;AAEV,MAAM+C,QAA4CpD,oBAAAA,CAAAA,kBAAA,CAQlD,+LAAA,EAAA;EAAAC,UAAA,EAAA,IAAA;AAAAC,EAAAA,KAAA,EAAAA,OAAA;AAAAyB,IAAAA;AAAA,GAAA;AAAU,CAAA,CAAA,EAAAtB,YAAA,EAAA,CAAA;AAEV,MAAMgD,eAAA,GAAmB7B,EAAe,IAAA;EACtC,IAAI,OAAOA,EAAA,KAAM,QAAU,EAAA;IACzB,OAAO,CAAA,CAAA,EAAIA,EAAA,CAAI,CAAA,CAAA;AACjB;EAEA,IAAI,OAAOA,EAAA,KAAM,QAAY,IAAA,OAAOA,EAAA,KAAM,SAAA,IAAaA,EAAA,KAAM,IAAM,EAAA;IACjE,OAAO,CAAA,EAAGA,EAAA,CAAG,CAAA;AACf;EAEA,OAAOA,EAAA,CAAE8B,QAAQ,EAAA;AACnB,CAAA;AAEA,MAAMC,UAAgDvD,oBAAAA,CAAAA,kBAAA,CAItD,uFAAA,EAAA;EAAAC,UAAA,EAAA,IAAA;AAAAC,EAAAA,KAAA,EAAAA,OAAA;AAAAmD,IAAAA;AAAA,GAAA;AAAU,CAAA,CAAA,EAAAhD,YAAA,EAAA,CAAA;AAEGsB,MAAAA,OAA0C3B,oBAAAA,CAAAA,kBAAA,CAiCvD,0iCAAA,EAAA;EAAAC,UAAA,EAAA,IAAA;AAAAC,EAAAA,KAAA,EAAAA,OAAA;IAAA2B,WAAA;IAAAc,SAAA;IAAAZ,YAAA;IAAAH,UAAA;IAAAI,WAAA;IAAAY,SAAA;IAAAX,OAAA;IAAAe,KAAA;IAAAd,YAAA;IAAAe,UAAA;IAAAd,eAAA;IAAAW,aAAA;IAAAV,OAAA;IAAAc,KAAA;IAAAb,IAAA;IAAAU,QAAA;IAAAP,OAAA;IAAAY,KAAA;IAAAX,SAAA;IAAAc,OAAA;IAAAhB,aAAA;AAAAY,IAAAA;AAAA,GAAA;AAAU,CAAA,CAAA,EAAA9C,YAAA,EAAA;;;;"}