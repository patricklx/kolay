{"version":3,"file":"helper.js","sources":["../../../src/typedoc/signature/helper.gts"],"sourcesContent":["import { template } from \"@ember/template-compiler\";\nimport { Type } from '../renderer.gts';\nimport { Load } from '../utils.gts';\nimport { Args, getArgs } from './args.gts';\nimport type { TOC } from '@ember/component/template-only';\nimport type { DeclarationReflection } from 'typedoc';\nfunction getSignature(info1: DeclarationReflection) {\n    /**\n   * export const Foo: HelperLike<{...}>\n   */ if (info1.variant === 'declaration' && info1.type?.type === 'reference' && info1.type?.package === '@glint/template' && info1.type?.name === 'HelperLike' && Array.isArray(info1.type?.typeArguments) && info1.type.typeArguments[0] && 'declaration' in info1.type.typeArguments[0]) {\n        // There can only be one type argument for a HelperLike\n        return info1.type.typeArguments[0]?.declaration;\n    }\n    /**\n   * export class MyHelper extends ...\n   */ if (Array.isArray(info1.extendedTypes) && info1.extendedTypes.length > 0) {\n        let firstExtended1 = info1.extendedTypes[0];\n        /**\n     * import Helper from '@ember/component/helper';\n     *\n     * export class MyHelper extends Helper<{...}>\n     */ if (firstExtended1?.type === 'reference' && firstExtended1.package === 'ember-source' && firstExtended1.qualifiedName.includes('/helper') && Array.isArray(firstExtended1.typeArguments) && firstExtended1.typeArguments[0] && 'declaration' in firstExtended1.typeArguments[0]) {\n            return firstExtended1.typeArguments[0].declaration;\n        }\n    }\n    /**\n   * export function(...): return;\n   */ if (info1.signatures) {\n        return info1.signatures;\n    }\n    /**\n   * export interface Signature { ... }\n   */ return info1;\n}\nfunction getReturn(info1: any) {\n    if (info1.variant === 'signature') {\n        return info1.type;\n    }\n    if (Array.isArray(info1)) {\n        return info1.find((item1)=>item1.name === 'Return')?.type;\n    }\n    if ('children' in info1) {\n        return getReturn(info1.children);\n    }\n}\nconst Return: TOC<{\n    Args: {\n        info: any;\n    };\n}> = template(`\n  {{#if @info}}\n    <div class='typedoc__helper__return'>\n      <h3 class='typedoc__heading'>Return</h3>\n\n      <Type @info={{@info}} />\n    </div>\n  {{/if}}\n`, {\n    eval () {\n        return eval(arguments[0]);\n    }\n});\nexport const HelperSignature: TOC<{\n    Args: {\n        /**\n     * Which module to import the type from\n     */ module: string;\n        /**\n     * The name of the component to render the type / JSDoc of\n     */ name: string;\n        /**\n     * The name of the package to lookup the module and export name.\n     */ package: string;\n    };\n}> = template(`\n  <Load\n    @package={{@package}}\n    @module={{@module}}\n    @name={{@name}}\n    as |declaration|\n  >\n    {{#let (getSignature declaration) as |info|}}\n      {{#if (globalThis.Array.isArray info)}}\n        {{#each info as |signature|}}\n          <Args @kind='helper' @info={{getArgs signature}} />\n          <Return @info={{getReturn signature}} />\n        {{/each}}\n      {{else}}\n        {{! Whenever we have a \"Full Signature\" or \"HelperLike\" definition }}\n        <Args @kind='helper' @info={{getArgs info}} />\n        <Return @info={{getReturn info}} />\n      {{/if}}\n\n    {{/let}}\n  </Load>\n`, {\n    eval () {\n        return eval(arguments[0]);\n    }\n});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL2tvbGF5L2tvbGF5L3VpL3NyYy90eXBlZG9jL3NpZ25hdHVyZS9oZWxwZXIuZ3RzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFR5cGUgfSBmcm9tICcuLi9yZW5kZXJlci5ndHMnO1xuaW1wb3J0IHsgTG9hZCB9IGZyb20gJy4uL3V0aWxzLmd0cyc7XG5pbXBvcnQgeyBBcmdzLCBnZXRBcmdzIH0gZnJvbSAnLi9hcmdzLmd0cyc7XG5cbmltcG9ydCB0eXBlIHsgVE9DIH0gZnJvbSAnQGVtYmVyL2NvbXBvbmVudC90ZW1wbGF0ZS1vbmx5JztcbmltcG9ydCB0eXBlIHsgRGVjbGFyYXRpb25SZWZsZWN0aW9uIH0gZnJvbSAndHlwZWRvYyc7XG5cbmZ1bmN0aW9uIGdldFNpZ25hdHVyZShpbmZvOiBEZWNsYXJhdGlvblJlZmxlY3Rpb24pIHtcbiAgLyoqXG4gICAqIGV4cG9ydCBjb25zdCBGb286IEhlbHBlckxpa2U8ey4uLn0-XG4gICAqL1xuICBpZiAoXG4gICAgaW5mby52YXJpYW50ID09PSAnZGVjbGFyYXRpb24nICYmXG4gICAgaW5mby50eXBlPy50eXBlID09PSAncmVmZXJlbmNlJyAmJlxuICAgIGluZm8udHlwZT8ucGFja2FnZSA9PT0gJ0BnbGludC90ZW1wbGF0ZScgJiZcbiAgICBpbmZvLnR5cGU_Lm5hbWUgPT09ICdIZWxwZXJMaWtlJyAmJlxuICAgIEFycmF5LmlzQXJyYXkoaW5mby50eXBlPy50eXBlQXJndW1lbnRzKSAmJlxuICAgIGluZm8udHlwZS50eXBlQXJndW1lbnRzWzBdICYmXG4gICAgJ2RlY2xhcmF0aW9uJyBpbiBpbmZvLnR5cGUudHlwZUFyZ3VtZW50c1swXVxuICApIHtcbiAgICAvLyBUaGVyZSBjYW4gb25seSBiZSBvbmUgdHlwZSBhcmd1bWVudCBmb3IgYSBIZWxwZXJMaWtlXG4gICAgcmV0dXJuIGluZm8udHlwZS50eXBlQXJndW1lbnRzWzBdPy5kZWNsYXJhdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBleHBvcnQgY2xhc3MgTXlIZWxwZXIgZXh0ZW5kcyAuLi5cbiAgICovXG4gIGlmIChBcnJheS5pc0FycmF5KGluZm8uZXh0ZW5kZWRUeXBlcykgJiYgaW5mby5leHRlbmRlZFR5cGVzLmxlbmd0aCA-IDApIHtcbiAgICBsZXQgZmlyc3RFeHRlbmRlZCA9IGluZm8uZXh0ZW5kZWRUeXBlc1swXTtcblxuICAgIC8qKlxuICAgICAqIGltcG9ydCBIZWxwZXIgZnJvbSAnQGVtYmVyL2NvbXBvbmVudC9oZWxwZXInO1xuICAgICAqXG4gICAgICogZXhwb3J0IGNsYXNzIE15SGVscGVyIGV4dGVuZHMgSGVscGVyPHsuLi59PlxuICAgICAqL1xuICAgIGlmIChcbiAgICAgIGZpcnN0RXh0ZW5kZWQ_LnR5cGUgPT09ICdyZWZlcmVuY2UnICYmXG4gICAgICBmaXJzdEV4dGVuZGVkLnBhY2thZ2UgPT09ICdlbWJlci1zb3VyY2UnICYmXG4gICAgICBmaXJzdEV4dGVuZGVkLnF1YWxpZmllZE5hbWUuaW5jbHVkZXMoJy9oZWxwZXInKSAmJlxuICAgICAgQXJyYXkuaXNBcnJheShmaXJzdEV4dGVuZGVkLnR5cGVBcmd1bWVudHMpICYmXG4gICAgICBmaXJzdEV4dGVuZGVkLnR5cGVBcmd1bWVudHNbMF0gJiZcbiAgICAgICdkZWNsYXJhdGlvbicgaW4gZmlyc3RFeHRlbmRlZC50eXBlQXJndW1lbnRzWzBdXG4gICAgKSB7XG4gICAgICByZXR1cm4gZmlyc3RFeHRlbmRlZC50eXBlQXJndW1lbnRzWzBdLmRlY2xhcmF0aW9uO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBleHBvcnQgZnVuY3Rpb24oLi4uKTogcmV0dXJuO1xuICAgKi9cbiAgaWYgKGluZm8uc2lnbmF0dXJlcykge1xuICAgIHJldHVybiBpbmZvLnNpZ25hdHVyZXM7XG4gIH1cblxuICAvKipcbiAgICogZXhwb3J0IGludGVyZmFjZSBTaWduYXR1cmUgeyAuLi4gfVxuICAgKi9cbiAgcmV0dXJuIGluZm87XG59XG5cbmZ1bmN0aW9uIGdldFJldHVybihpbmZvOiBhbnkpIHtcbiAgaWYgKGluZm8udmFyaWFudCA9PT0gJ3NpZ25hdHVyZScpIHtcbiAgICByZXR1cm4gaW5mby50eXBlO1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoaW5mbykpIHtcbiAgICByZXR1cm4gaW5mby5maW5kKChpdGVtKSA9PiBpdGVtLm5hbWUgPT09ICdSZXR1cm4nKT8udHlwZTtcbiAgfVxuXG4gIGlmICgnY2hpbGRyZW4nIGluIGluZm8pIHtcbiAgICByZXR1cm4gZ2V0UmV0dXJuKGluZm8uY2hpbGRyZW4pO1xuICB9XG59XG5cbmNvbnN0IFJldHVybjogVE9DPHsgQXJnczogeyBpbmZvOiBhbnkgfSB9PiA9IDx0ZW1wbGF0ZT5cbiAge3sjaWYgQGluZm99fVxuICAgIDxkaXYgY2xhc3M9J3R5cGVkb2NfX2hlbHBlcl9fcmV0dXJuJz5cbiAgICAgIDxoMyBjbGFzcz0ndHlwZWRvY19faGVhZGluZyc-UmV0dXJuPC9oMz5cblxuICAgICAgPFR5cGUgQGluZm89e3tAaW5mb319IC8-XG4gICAgPC9kaXY-XG4gIHt7L2lmfX1cbjwvdGVtcGxhdGU-O1xuXG5leHBvcnQgY29uc3QgSGVscGVyU2lnbmF0dXJlOiBUT0M8e1xuICBBcmdzOiB7XG4gICAgLyoqXG4gICAgICogV2hpY2ggbW9kdWxlIHRvIGltcG9ydCB0aGUgdHlwZSBmcm9tXG4gICAgICovXG4gICAgbW9kdWxlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGNvbXBvbmVudCB0byByZW5kZXIgdGhlIHR5cGUgLyBKU0RvYyBvZlxuICAgICAqL1xuICAgIG5hbWU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgcGFja2FnZSB0byBsb29rdXAgdGhlIG1vZHVsZSBhbmQgZXhwb3J0IG5hbWUuXG4gICAgICovXG4gICAgcGFja2FnZTogc3RyaW5nO1xuICB9O1xufT4gPSA8dGVtcGxhdGU-XG4gIDxMb2FkXG4gICAgQHBhY2thZ2U9e3tAcGFja2FnZX19XG4gICAgQG1vZHVsZT17e0Btb2R1bGV9fVxuICAgIEBuYW1lPXt7QG5hbWV9fVxuICAgIGFzIHxkZWNsYXJhdGlvbnxcbiAgPlxuICAgIHt7I2xldCAoZ2V0U2lnbmF0dXJlIGRlY2xhcmF0aW9uKSBhcyB8aW5mb3x9fVxuICAgICAge3sjaWYgKGdsb2JhbFRoaXMuQXJyYXkuaXNBcnJheSBpbmZvKX19XG4gICAgICAgIHt7I2VhY2ggaW5mbyBhcyB8c2lnbmF0dXJlfH19XG4gICAgICAgICAgPEFyZ3MgQGtpbmQ9J2hlbHBlcicgQGluZm89e3tnZXRBcmdzIHNpZ25hdHVyZX19IC8-XG4gICAgICAgICAgPFJldHVybiBAaW5mbz17e2dldFJldHVybiBzaWduYXR1cmV9fSAvPlxuICAgICAgICB7ey9lYWNofX1cbiAgICAgIHt7ZWxzZX19XG4gICAgICAgIHt7ISBXaGVuZXZlciB3ZSBoYXZlIGEgXCJGdWxsIFNpZ25hdHVyZVwiIG9yIFwiSGVscGVyTGlrZVwiIGRlZmluaXRpb24gfX1cbiAgICAgICAgPEFyZ3MgQGtpbmQ9J2hlbHBlcicgQGluZm89e3tnZXRBcmdzIGluZm99fSAvPlxuICAgICAgICA8UmV0dXJuIEBpbmZvPXt7Z2V0UmV0dXJuIGluZm99fSAvPlxuICAgICAge3svaWZ9fVxuXG4gICAge3svbGV0fX1cbiAgPC9Mb2FkPlxuPC90ZW1wbGF0ZT47XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLFNBQVMsSUFBSSxRQUFRLGtCQUFrQjtBQUN2QyxTQUFTLElBQUksUUFBUSxlQUFlO0FBQ3BDLFNBQVMsSUFBSSxFQUFFLE9BQU8sUUFBUSxhQUFhO0FBRTNDLGNBQWMsR0FBRyxRQUFRLGlDQUFpQztBQUMxRCxjQUFjLHFCQUFxQixRQUFRLFVBQVU7QUFFckQsU0FBUyxhQUFhLE9BQU0scUJBQXFCO0lBQy9DOztHQUVDLEdBQ0QsSUFDRSxNQUFLLE9BQU8sS0FBSyxpQkFDakIsTUFBSyxJQUFJLEVBQUUsU0FBUyxlQUNwQixNQUFLLElBQUksRUFBRSxZQUFZLHFCQUN2QixNQUFLLElBQUksRUFBRSxTQUFTLGdCQUNwQixNQUFNLE9BQU8sQ0FBQyxNQUFLLElBQUksRUFBRSxrQkFDekIsTUFBSyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsSUFDMUIsaUJBQWlCLE1BQUssSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLEVBQzNDO1FBQ0EsdURBQXVEO1FBQ3ZELE9BQU8sTUFBSyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRTtJQUNyQztJQUVBOztHQUVDLEdBQ0QsSUFBSSxNQUFNLE9BQU8sQ0FBQyxNQUFLLGFBQWEsS0FBSyxNQUFLLGFBQWEsQ0FBQyxNQUFNLEdBQUcsR0FBRztRQUN0RSxJQUFJLGlCQUFnQixNQUFLLGFBQWEsQ0FBQyxFQUFFO1FBRXpDOzs7O0tBSUMsR0FDRCxJQUNFLGdCQUFlLFNBQVMsZUFDeEIsZUFBYyxPQUFPLEtBQUssa0JBQzFCLGVBQWMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxjQUNyQyxNQUFNLE9BQU8sQ0FBQyxlQUFjLGFBQWEsS0FDekMsZUFBYyxhQUFhLENBQUMsRUFBRSxJQUM5QixpQkFBaUIsZUFBYyxhQUFhLENBQUMsRUFBRSxFQUMvQztZQUNBLE9BQU8sZUFBYyxhQUFhLENBQUMsRUFBRSxDQUFDLFdBQVc7UUFDbkQ7SUFDRjtJQUVBOztHQUVDLEdBQ0QsSUFBSSxNQUFLLFVBQVUsRUFBRTtRQUNuQixPQUFPLE1BQUssVUFBVTtJQUN4QjtJQUVBOztHQUVDLEdBQ0QsT0FBTztBQUNUO0FBRUEsU0FBUyxVQUFVLE9BQU0sR0FBRztJQUMxQixJQUFJLE1BQUssT0FBTyxLQUFLLGFBQWE7UUFDaEMsT0FBTyxNQUFLLElBQUk7SUFDbEI7SUFFQSxJQUFJLE1BQU0sT0FBTyxDQUFDLFFBQU87UUFDdkIsT0FBTyxNQUFLLElBQUksQ0FBQyxDQUFDLFFBQVMsTUFBSyxJQUFJLEtBQUssV0FBVztJQUN0RDtJQUVBLElBQUksY0FBYyxPQUFNO1FBQ3RCLE9BQU8sVUFBVSxNQUFLLFFBQVE7SUFDaEM7QUFDRjtBQUVBLE1BQU0sUUFBUTtJQUFNO1FBQVEsTUFBTSxHQUFHOztLQUFRLFNBQVUsQ0FBQTs7Ozs7Ozs7QUFRdkQsQ0FBQSxFQUFBO0lBQUE7UUFBQSxPQUFBLEtBQUEsU0FBQSxDQUFBLEVBQVc7SUFBRDtBQUFBO0FBRVYsT0FBTyxNQUFNLGlCQUFpQjtJQUM1QjtRQUNFOztLQUVDLEdBQ0QsUUFBUSxNQUFNO1FBQ2Q7O0tBRUMsR0FDRCxNQUFNLE1BQU07UUFDWjs7S0FFQyxHQUNELFNBQVMsTUFBTTs7S0FFZCxTQUFVLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXFCZixDQUFBLEVBQUE7SUFBQTtRQUFBLE9BQUEsS0FBQSxTQUFBLENBQUEsRUFBVztJQUFEO0FBQUEsR0FBRSJ9"],"names":["getSignature","info1","variant","type","package","name","Array","isArray","typeArguments","declaration","extendedTypes","length","firstExtended1","qualifiedName","includes","signatures","getReturn","find","item1","children","Return","precompileTemplate","strictMode","scope","Type","templateOnly","HelperSignature","Load","globalThis","Args","getArgs"],"mappings":";;;;;;;AAOA,SAASA,aAAaC,KAA2B,EAAA;AAC/C;;;EAGA,IACEA,KAAA,CAAKC,OAAO,KAAK,aAAA,IACjBD,KAAA,CAAKE,IAAI,EAAEA,IAAA,KAAS,WAAA,IACpBF,KAAA,CAAKE,IAAI,EAAEC,OAAA,KAAY,iBAAA,IACvBH,KAAA,CAAKE,IAAI,EAAEE,IAAA,KAAS,YAAA,IACpBC,KAAA,CAAMC,OAAO,CAACN,KAAA,CAAKE,IAAI,EAAEK,aAAA,CAAA,IACzBP,KAAA,CAAKE,IAAI,CAACK,aAAa,CAAC,CAAA,CAAE,IAC1B,aAAA,IAAiBP,KAAA,CAAKE,IAAI,CAACK,aAAa,CAAC,CAAA,CAAE,EAC3C;AACA;IACA,OAAOP,KAAA,CAAKE,IAAI,CAACK,aAAa,CAAC,CAAA,CAAE,EAAEC,WAAA;AACrC;AAEA;;;AAGA,EAAA,IAAIH,KAAA,CAAMC,OAAO,CAACN,KAAA,CAAKS,aAAa,CAAKT,IAAAA,KAAA,CAAKS,aAAa,CAACC,MAAM,GAAG,CAAG,EAAA;AACtE,IAAA,IAAIC,cAAA,GAAgBX,KAAA,CAAKS,aAAa,CAAC,CAAE,CAAA;AAEzC;;;;;AAKA,IAAA,IACEE,cAAA,EAAeT,IAAA,KAAS,WAAA,IACxBS,cAAA,CAAcR,OAAO,KAAK,cAAA,IAC1BQ,cAAA,CAAcC,aAAa,CAACC,QAAQ,CAAC,SACrCR,CAAAA,IAAAA,KAAA,CAAMC,OAAO,CAACK,cAAA,CAAcJ,aAAa,CAAA,IACzCI,cAAA,CAAcJ,aAAa,CAAC,CAAA,CAAE,IAC9B,aAAiBI,IAAAA,cAAA,CAAcJ,aAAa,CAAC,EAAE,EAC/C;AACA,MAAA,OAAOI,cAAA,CAAcJ,aAAa,CAAC,CAAA,CAAE,CAACC,WAAW;AACnD;AACF;AAEA;;;EAGA,IAAIR,KAAA,CAAKc,UAAU,EAAE;IACnB,OAAOd,KAAA,CAAKc,UAAU;AACxB;AAEA;;;AAGA,EAAA,OAAOd,KAAA;AACT;AAEA,SAASe,UAAUf,KAAS,EAAA;AAC1B,EAAA,IAAIA,KAAA,CAAKC,OAAO,KAAK,WAAa,EAAA;IAChC,OAAOD,KAAA,CAAKE,IAAI;AAClB;AAEA,EAAA,IAAIG,KAAA,CAAMC,OAAO,CAACN,KAAA,CAAO,EAAA;IACvB,OAAOA,KAAA,CAAKgB,IAAI,CAAEC,KAAA,IAASA,KAAA,CAAKb,IAAI,KAAK,QAAA,CAAA,EAAWF,IAAA;AACtD;EAEA,IAAI,UAAA,IAAcF,KAAA,EAAM;AACtB,IAAA,OAAOe,SAAA,CAAUf,KAAA,CAAKkB,QAAQ,CAAA;AAChC;AACF;AAEA,MAAMC,SAAuCC,oBAAAA,CAAAA,kBAAA,CAQ7C,6KAAA,EAAA;EAAAC,UAAA,EAAA,IAAA;AAAAC,EAAAA,KAAA,EAAAA,OAAA;AAAAC,IAAAA;AAAA,GAAA;AAAU,CAAA,CAAA,EAAAC,YAAA,EAAA,CAAA;AAEGC,MAAAA,kBAeRL,oBAAAA,CAAAA,kBAAA,CAqBL,kmBAAA,EAAA;EAAAC,UAAA,EAAA,IAAA;AAAAC,EAAAA,KAAA,EAAAA,OAAA;IAAAI,IAAA;IAAA3B,YAAA;IAAA4B,UAAA;IAAAC,IAAA;IAAAC,OAAA;IAAAV,MAAA;AAAAJ,IAAAA;AAAA,GAAA;AAAU,CAAA,CAAA,EAAAS,YAAA,EAAA;;;;"}